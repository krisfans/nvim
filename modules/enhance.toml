[[plugins]]
repo = 'Shougo/dein.vim'
[[plugins]]
repo = 'wsdjeg/dein-ui.vim'
on_cmd = 'DeinUpdate'

[[plugins]]
repo = 'nvim-treesitter/nvim-treesitter'
on_event = ['BufReadPre','BufNewFile']
hook_post_update = ':TSUpdate'
hook_source = '''
    lua require("treesitter")
'''
[[plugins]]
repo = 'nvim-treesitter/nvim-treesitter-refactor'
depends = 'nvim-treesitter'

[[plugins]]
repo = 'andymass/vim-matchup'
on_event = ['BufReadPre','BufNewFile']
# [[plugins]]
# repo = 'luochen1990/rainbow'
# on_ft = [
#   'html',
#   'css',
#   'javascript',
#   'javascriptreact',
#   'go',
#   'python',
#   'lua',
#   'rust',
#   'vim',
#   'less',
#   'stylus',
#   'sass',
#   'scss',
#   'json',
#   'ruby',
#   'toml',
#   'tex',
# ]
# hook_source = '''
# let g:rainbow_active = 1
# '''
# [[plugins]]
# repo = 'voldikss/vim-floaterm'
# on_cmd = ['FloatermNew', 'FloatermToggle', 'FloatermPrev', 'FloatermNext', 'FloatermSend']
# hook_source= '''
# let g:floaterm_position = 'center'
# let g:floaterm_wintype = 'floating'

# " Set floaterm window's background to black
# hi Floaterm guibg=black
# " Set floating window border line color to cyan, and background to orange
# hi FloatermBorder guibg=none guifg=cyan
# '''


[[plugins]] # 关闭buffer而不关闭窗口
repo = 'rbgrouleff/bclose.vim'
on_map = 'Bclose'

[[plugins]]
repo = 'lukas-reineke/indent-blankline.nvim'
on_event = ['BufReadPre','BufNewFile']
hook_source = '''
    let g:indent_blankline_char = '│'
    " set colorcolumn=99999
    let g:indent_blankline_filetype_exclude = ['denite','startify','tagbar',
        \ 'vista_kind','vista','coc-explorer','dashboard', 'tree']
'''

[[plugins]] #注释
repo = 'tyru/caw.vim'
depends = 'context_filetype.vim'
on_map = { nx = '<Plug>' }

[[plugins]] # 函数表
repo = 'liuchengxu/vista.vim'
on_cmd = ['Vista', 'Vista!', 'Vista!!']
hook_source = '''
let g:vista_icon_indent = ["╰─▸ ", "├─▸ "]
let g:vista_disable_statusline = 1
let g:vista_default_executive = 'ctags'
let g:vista_echo_cursor_strategy = 'echo'
let g:vista_vimwiki_executive = 'markdown'
let g:vista_executive_for = {
    \ 'c': 'nvim_lsp',
    \ 'cpp': 'nvim_lsp',
    \ 'vimwiki': 'markdown',
    \ 'pandoc': 'markdown',
    \ 'markdown': 'toc',
    \ 'yaml': 'nvim_lsp',
    \ 'typescript': 'nvim_lsp',
    \ 'typescriptreact': 'nvim_lsp',
    \ }
let g:vista#renderer#icons = {}
let g:vista#renderer#icons = {
    \ 'func': "",
    \ 'function': "",
    \ 'functions': "",
    \ 'var': "𝒙",
    \ 'variable': "𝒙",
    \ 'variables': "𝒙",
    \ 'const': "",
    \ 'constant': "",
    \ 'constructor': "略",
    \ 'method': "",
    \ 'package': "",
    \ 'packages': "",
    \ 'enum': "",
    \ 'enummember': "",
    \ 'enumerator': "",
    \ 'module': "",
    \ 'modules': "",
    \ 'type': "",
    \ 'typedef': "",
    \ 'types': "",
    \ 'field': "",
    \ 'fields': "",
    \ 'macro': "",
    \ 'macros': "",
    \ 'map': "פּ",
    \ 'class': "",
    \ 'augroup': "פּ",
    \ 'struct': "",
    \ 'union': "鬒",
    \ 'member': "",
    \ 'target': "",
    \ 'property': "襁",
    \ 'prototype': "襁",
    \ 'interface': "",
    \ 'namespace': "",
    \ 'subroutine': "羚",
    \ 'implementation': "",
    \ 'typeParameter': "",
    \ 'default': "",
    \ 'label': '笠',
    \ 'chapter': '',
    \ 'section': '',
    \ 'subsection': '',
    \ 'subsubsection': '',
    \ }
'''

[[plugins]] #tags
repo = 'ludovicchabant/vim-gutentags'
if = 'executable("ctags")'
on_event = ['BufReadPost', 'BufWritePost']
hook_source = '''
    let g:gutentags_cache_dir = $DATA_PATH . '/tags'
    let g:gutentags_project_root = ['.root', '.git', '.svn', '.hg', '.project','go.mod']
    let g:gutentags_generate_on_write = 1
    let g:gutentags_generate_on_missing = 1
    let g:gutentags_generate_on_new = 0
    let g:gutentags_exclude_filetypes = [ 'defx', 'denite', 'vista', 'magit' ]
    let g:gutentags_ctags_extra_args = ['--output-format=e-ctags']
    let g:gutentags_ctags_exclude = ['*.json', '*.js', '*.ts', '*.jsx', '*.css',
        \ '*.less', '*.sass', '*.go', '*.dart', 'node_modules', 'dist', 'vendor']
'''
# [[plugins]] #格式化
# repo = 'Chiel92/vim-autoformat'
# on_cmd = 'Autoformat'
# hook_source = '''
# autocmd FileType vim,tex let b:autoformat_autoindent=0
# '''
[[plugins]] # 格式代码
repo = 'sbdchd/neoformat'
on_cmd = 'Neoformat'
# hook_source = '''
# let g:neoformat_tex_latexindent = {
# \ 'exe': 'latexindent',
# \ 'args': ['-l'],
# \ 'stdin': 1
# \ }
# '''
[[plugins]] # 对齐
repo = 'junegunn/vim-easy-align'
on_map = '<Plug>(EasyAlign)'


# [[plugins]]
# repo = 'liuchengxu/vim-clap'
# merged = 0
# build = 'bash install.sh'
# on_map = { n = '<Plug>' }
# hook_source = '''
#     let g:clap_cache_directory = $DATA_PATH . '/clap'
#     " let g:clap_theme = 'material_design_dark'
#     let g:clap_current_selection_sign= { 'text': '➤', 'texthl': "ClapCurrentSelectionSign", "linehl": "ClapCurrentSelection"}
#     " let g:clap_layout = { 'relative': 'editor' }
#     " let g:clap_enable_icon = 1
#     " let g:clap_search_box_border_style = 'curve'
#     " let g:clap_provider_grep_enable_icon = 1
#     " let g:clap_prompt_format = '%spinner%%forerunner_status% %provider_id%: '
#     " " A funtion to config highlight of ClapSymbol
#     " " when the background color is opactiy
#     " function! s:ClapSymbolHL() abort
#     "     let s:current_bgcolor = synIDattr(hlID("Normal"), "bg")
#     "     if s:current_bgcolor == ''
#     "         hi ClapSymbol guibg=NONE ctermbg=NONE
#     "     endif
#     " endfunction
#               "
#     " autocmd User ClapOnEnter call s:ClapSymbolHL()
# hi default link ClapPreview Pmenu
# '''
# [[plugins]]
# repo = 'vn-ki/coc-clap'
# on_source = 'vim-clap'


[[plugins]]
repo = 'nvim-lua/plenary.nvim'
[[plugins]]
repo = 'nvim-telescope/telescope.nvim'
on_cmd = 'Telescope'
hook_source = '''
lua << EOF
require('telescope').setup({
    defaults = {
        prompt_prefix = "🔍"
    },
})
EOF
'''
# [[plugins]]
# repo = 'junegunn/fzf.vim'
# hook_source = '''
# let g:vista_fzf_preview = ['down:50%']
# let g:fzf_layout = { 'window': { 'width': 0.9, 'height': 0.9 } }
#
# let g:coc_fzf_preview='right:50%'
# let g:fzf_preview_window = 'right:50%'
#
# "" Change the position, if set this, the window will split right
# "let g:fzf_layout = { 'right': '~50%' }
#
# let g:fzf_commits_log_options = '--graph --color=always --format="%C(auto)%h%d %s %C(black)%C(bold)%cr"'
#
#
#
#
# let g:fzf_colors =
#   \ { 'fg':      ['fg', 'Normal'],
#     \ 'bg':      ['bg', 'Normal'],
#     \ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
#     \ 'bg+':     ['bg', 'Keyword', 'CursorColumn'],
#     \ 'hl+':     ['fg', 'Statement'],
#     \ 'info':    ['fg', 'PreProc'],
#     \ 'border':  ['fg', 'Ignore'],
#     \ 'prompt':  ['fg', 'Conditional'],
#     \ 'pointer': ['fg', 'Exception'],
#     \ 'marker':  ['fg', 'Keyword'],
#     \ 'spinner': ['fg', 'Label'],
#     \ 'header':  ['fg', 'Comment']
#   \ }
# '''
# [[plugins]]
# repo = 'junegunn/fzf'
# build ='./install --all'
# merged = 0
