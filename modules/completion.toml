[[plugins]]
repo = 'neovim/nvim-lspconfig'
on_event = ['BufReadPre','BufNewFile']
hook_source ='''
	lua require('lsp')
'''
[[plugins]]
repo = 'glepnir/lspsaga.nvim'
on_event = ['BufReadPre','BufNewFile']

[[plugins]]
repo = 'hrsh7th/vim-vsnip'
on_event = 'InsertEnter'
hook_source = '''
let g:vsnip_snippet_dir = expand('~/.config/nvim/snips')
" Jump forward or backward
imap <expr> <Tab>   vsnip#jumpable(1)   ? '<Plug>(vsnip-jump-next)'    : '<Tab>'
smap <expr> <Tab>   vsnip#jumpable(1)   ? '<Plug>(vsnip-jump-next)'    : '<Tab>'
imap <expr> <S-Tab> vsnip#jumpable(-1)  ? '<Plug>(vsnip-jump-prev)'    : '<S-Tab>'
smap <expr> <S-Tab> vsnip#jumpable(-1)  ? '<Plug>(vsnip-jump-prev)'    : '<S-Tab>'
'''
[[plugins]]
repo = 'hrsh7th/vim-vsnip-integ'
on_event = 'InsertEnter'

[[plugins]]
repo = 'krisfans/friendly-snippets'
on_event = 'InsertEnter'


[[plugins]]
repo = 'windwp/nvim-autopairs'
on_event = 'InsertEnter'
hook_source = '''
lua << EOF
--require('nvim-autopairs').setup()
require('nvim-autopairs').setup()
	local Rule = require('nvim-autopairs.rule')
	local remap = vim.api.nvim_set_keymap
	local npairs = require('nvim-autopairs')
-- you can use some builtin condition
	local cond = require('nvim-autopairs.conds')
npairs.add_rules({
	Rule("$", "$",{"tex", "latex"})
	-- don't add a pair if  the previous character is xxx
	:with_pair(cond.not_before_regex_check("xxx", 3))
}
)
EOF
'''

[[plugins]]
repo = 'hrsh7th/nvim-cmp'
on_event = 'InsertEnter'
hook_source = '''
lua << EOF
    local cmp = require("cmp")
    cmp.setup({
        snippet = {
            expand = function(args)
                vim.fn["vsnip#anonymous"](args.body)
            end,
        },
        sources = {
            { name = "nvim_lsp" },
            { name = "path" },
            { name = "buffer" },
            { name = "vsnip" },
        },
        mapping = {
            ["<S-TAB>"] = cmp.mapping.select_prev_item(),
            ["<TAB>"] = cmp.mapping.select_next_item(),
            ["<C-Space>"] = cmp.mapping.complete(),
            ["<C-e>"] = cmp.mapping.close(),
            ['<CR>'] = cmp.mapping.confirm()
        },
    })
EOF
'''
[[plugins]]
repo = 'hrsh7th/cmp-buffer'
on_source = 'nvim-cmp'
[[plugins]]
repo = 'hrsh7th/cmp-path'
on_source = 'nvim-cmp'
[[plugins]]
repo = 'hrsh7th/cmp-vsnip'
on_source = 'nvim-cmp'
[[plugins]]
repo = 'hrsh7th/cmp-nvim-lsp'
on_source = 'nvim-cmp'

# [[plugins]]
# repo = 'vim-denops/denops.vim'
# [[plugins]]
# repo = 'Shougo/ddc.vim'
# hook_source = '''
# call ddc#custom#patch_global('sources', ['nvimlsp','around','vsnip'])
# call ddc#custom#patch_global('sourceOptions', {
#         \ '_': {
#         \   'matchers': ['matcher_head'],
#         \   'sorters': ['sorter_rank'],
# 		\   'smartCase': v:true,
# 		\	'isVolatile': v:true,
# 		\	'minAutoCompleteLength': 0
#         \ },
#         \ 'around': {'mark': 'A', 'minAutoCompleteLength': 3},
#         \ 'nvimlsp': {'matchers': ['matcher_head'],'mark':'LSP','forceCompletionPattern':  '\.\w*|:\w*|->\w*'},
#         \ 'buffer': {'mark': 'B', 'minAutoCompleteLength': 3},
#         \ 'vsnip': {'mark': 'Vsnip', 'minAutoCompleteLength': 1}
#         \ })
# " Change source options
# call ddc#custom#patch_global('sourceParams', {
#     \ 'nvimlsp': {'useIcon': v:true},
#     \ })
# " Customize settings on a filetype
#
# call ddc#custom#patch_filetype(['c', 'cpp'], 'sourceOptions', {
# 	\ 'nvimlsp':{'matchers':['matcher_head'],'mark':'LSP','forceCompletionPattern': ' ','minAutoCompleteLength': 1},
#     \ })
# " <TAB>: completion.
# inoremap <silent><expr> <TAB>
# \ pumvisible() ? "\<C-n>" :
# \ (col('.') <= 1 <Bar><Bar> getline('.')[col('.') - 2] =~# '\s') ?
# \ "\<TAB>" : ddc#manual_complete()
# " <S-TAB>: completion back.
# inoremap <expr><S-TAB>  pumvisible() ? "\<C-p>" : "\<C-h>"
#
# " Use ddc.
# call ddc#enable()
# call ddc_nvim_lsp_doc#enable()
# '''
# [[plugins]]
# repo = 'Shougo/ddc-around'
# [[plugins]]
# repo = 'matsui54/ddc-buffer'
# [[plugins]]
# repo = 'Shougo/ddc-matcher_head'
# [[plugins]]
# repo = 'Shougo/ddc-sorter_rank'
# [[plugins]]
# repo = 'Shougo/ddc-nvim-lsp'
# [[plugins]]
# repo = 'matsui54/ddc-nvim-lsp-doc'
# [[plugins]]
# repo = 'SirVer/ultisnips'
# on_source = 'ddc.vim'


