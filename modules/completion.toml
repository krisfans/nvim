[[plugins]]
repo = 'neovim/nvim-lspconfig'
on_event = ['BufReadPre','BufNewFile']
hook_source ='''
    lua require('lsp')
'''
[[plugins]]
# repo = 'glepnir/lspsaga.nvim'
repo = 'Elysium1436/lspsaga.nvim'
on_event = ['BufReadPre','BufNewFile']

[[plugins]]
repo = 'windwp/nvim-autopairs'
on_event = 'InsertEnter'
hook_source = '''
lua << EOF
require('nvim-autopairs').setup()
    local Rule = require('nvim-autopairs.rule')
    local remap = vim.api.nvim_set_keymap
    local npairs = require('nvim-autopairs')
-- you can use some builtin condition
    local cond = require('nvim-autopairs.conds')
npairs.add_rules({
    Rule("$", "$",{"tex", "latex"})
    -- don't add a pair if  the previous character is xxx
    :with_pair(cond.not_before_regex_check("xxx", 3))
})
EOF
'''
# [[plugins]]
# repo = 'LunarWatcher/auto-pairs'

# [[plugins]]
# repo = 'dcampos/cmp-snippy'
# on_source = 'nvim-snippy'
# [[plugins]]
# repo = 'dcampos/nvim-snippy'
# on_event = 'InsertEnter'
# hook_source = '''
#   imap <expr> <Tab> snippy#can_expand_or_advance() ? '<Plug>(snippy-expand-or-next)' : '<Tab>'
#   smap <expr> <Tab> snippy#can_jump(1) ? '<Plug>(snippy-next)' : '<Tab>'
#   imap <expr> <S-Tab> snippy#can_jump(-1) ? '<Plug>(snippy-previous)' : '<Tab>'
#   smap <expr> <S-Tab> snippy#can_jump(-1) ? '<Plug>(snippy-previous)' : '<Tab>'
# '''

# [[plugins]]
# repo = 'honza/vim-snippets'
# [[plugins]]
# repo = 'SirVer/ultisnips'
# hook_source = '''
# let g:UltiSnipsExpandTrigger="<cr>"
# let g:UltiSnipsJumpForwardTrigger="<tab>"
# let g:UltiSnipsJumpBackwardTrigger="<S-Tab>"
# '''

[[plugins]]
repo = 'hrsh7th/vim-vsnip'
on_event = 'InsertEnter'
hook_add = '''
    let g:vsnip_snippet_dir = expand('~/.config/nvim/snips')
    imap <expr> <Tab> vsnip#jumpable(1)   ? '<Plug>(vsnip-jump-next)'    : '<Tab>'
    smap <expr> <Tab> vsnip#jumpable(1)   ? '<Plug>(vsnip-jump-next)'    : '<Tab>'
    imap <expr> <S-Tab> vsnip#jumpable(-1)    ? '<Plug>(vsnip-jump-prev)'    : '<S-Tab>'
    smap <expr> <S-Tab> vsnip#jumpable(-1)    ? '<Plug>(vsnip-jump-prev)'    : '<S-Tab>'
'''
[[plugins]]
repo = 'hrsh7th/vim-vsnip-integ'
on_source = 'vim-vsnip'
[[plugins]]
repo = 'krisfans/friendly-snippets'
on_event = 'InsertEnter'
#
#
[[plugins]]
repo = 'hrsh7th/nvim-cmp'
on_event = 'InsertEnter'
hook_source = '''
lua << EOF
local cmp = require("cmp")
    cmp.setup({
        snippet = {
            expand = function(args)
               vim.fn["vsnip#anonymous"](args.body)
             -- require 'snippy'.expand_snippet(args.body)
        end,
    },
    sources = {
        { name = "nvim_lsp" },
        { name = "path" },
        { name = "buffer" },
        { name = "vsnip" },
       -- { name = 'snippy' }
    },
    mapping = {
        ["<S-TAB>"] = cmp.mapping.select_prev_item(),
        ["<TAB>"] = cmp.mapping.select_next_item(),
        ["<C-Space>"] = cmp.mapping.complete(),
        ["<C-e>"] = cmp.mapping.close(),
        ['<CR>'] = cmp.mapping.confirm()
    },
})
EOF
'''
[[plugins]]
repo = 'hrsh7th/cmp-buffer'
on_source = 'nvim-cmp'
[[plugins]]
repo = 'hrsh7th/cmp-path'
on_source = 'nvim-cmp'
[[plugins]]
repo = 'hrsh7th/cmp-vsnip'
on_source = 'nvim-cmp'
[[plugins]]
repo = 'hrsh7th/cmp-nvim-lsp'
on_source = 'nvim-cmp'


# [[plugins]]
# repo = 'vim-denops/denops.vim'
# [[plugins]]
# repo = 'Shougo/ddc.vim'
# depends = ['context_filetype.vim', 'denops.vim']
# on_event = 'InsertEnter'
# hook_source = '''
#     " call ddc#custom#patch_global('completionMenu', 'pum.vim')
#
#  call ddc#custom#patch_global('sources',
#     \ ['nvim-lsp', 'vsnip', 'buffer', 'file'],
#     \ )
# call ddc#custom#patch_global('sourceOptions', {
#     \ '_': {
#     \   'ignoreCase': v:true,
#     \   'isVolatile': v:true,
#     \   'matchers': ['matcher_head'],
#     \   'sorters': ['sorter_rank'],
#     \ },
#     \ 'nvim-lsp': {
#     \   'mark': 'LSP',
#     \   'minAutoCompleteLength': 1,
#     \   'forceCompletionPattern': '\.\w*|:\w*|->\w*|\w*<'
#     \ },
#     \ 'around': {
#     \   'mark': 'A',
#     \ },
#     \ 'buffer': {
#     \   'mark': 'Buffer',
#     \ },
#     \ 'vsnip': {
#     \   'mark': 'Vsnip',
#     \   'dup': v:true
#     \ },
#     \ 'ultisnips': {
#     \   'mark': 'US',
#     \   'dup': v:true,
#     \ },
#     \ 'necovim': {'mark': 'Vim'},
#     \ 'deoppet': {'mark': 'DP', 'dup': v:true},
#     \ 'nextword': {
#     \   'mark': 'nextword',
#     \   'minAutoCompleteLength': 3,
#     \   'isVolatile': v:true,
#     \ },
#     \ 'file': {
#     \   'mark': 'F',
#     \   'minAutoCompleteLength': 100,
#     \   'forceCompletionPattern': '[\./\\\\]'
#     \ },
#     \ })
# call ddc#custom#patch_filetype(
#     \ ['ps1', 'dosbatch', 'autohotkey', 'registry'], {
#     \ 'sourceOptions': {
#     \   'file': {
#     \     'forceCompletionPattern': '\S\\\S*',
#     \   },
#     \ },
#     \ 'sourceParams': {
#     \   'file': {
#     \     'mode': 'win32',
#     \   },
#     \ }})
# call ddc#custom#patch_filetype(
#     \ ['latex', 'tex'], {
#     \ 'sourceOptions': {
#     \   'nvim-lsp': {
#     \     'forceCompletionPattern': '\S',
#     \   },
#     \ },
#     \ })
# call ddc#custom#patch_global('sourceParams',{
#     \ 'file': {
#     \   'displayFile': "File",
#     \   'displayDir': "Dir",
#     \   'displaySym': "Sym",
#     \   'displayCwd': "",
#     \   'displayBuf': "",
#     \ }})
# " autocmd CompleteDone * silent! pclose!
# " autocmd User PumCompleteDone call vsnip_integ#on_complete_done(g:pum#completed_item)
# " Use ddc.
# call ddc#enable()
# '''
#
# [[plugins]]
# repo = 'Shougo/ddc-matcher_head'
# on_source = 'ddc.vim'
# [[plugins]]
# repo = 'Shougo/ddc-sorter_rank'
# on_source = 'ddc.vim'
# # [[plugins]]
# # repo = 'Shougo/ddc-converter_remove_overlap'
# # on_source = 'ddc.vim'
# # [[plugins]]
# # repo = 'Shougo/ddc-around'
# # on_source = 'ddc.vim'
# [[plugins]]
# repo = 'matsui54/ddc-buffer'
# on_source = 'ddc.vim'
# [[plugins]]
# repo = 'Shougo/neco-vim'
# on_source = 'ddc.vim'
# hook_source = '''
# call ddc#custom#patch_filetype(
#       \ ['vim', 'toml'], 'sources',  ['necovim', 'vsnip', 'buffer',  'file']  )
# '''
# [[plugins]]
# repo = 'Shougo/ddc-nvim-lsp'
# on_source = 'ddc.vim'
# [[plugins]]
# repo = 'LumaKernel/ddc-file'
# on_source = 'ddc.vim'
#
# [[plugins]]
# repo = 'matsui54/ddc-nvim-lsp-doc'
# on_source = 'ddc.vim'
# hook_source = '''
# let g:ddc_nvim_lsp_doc_config = {
#    \ 'documentation': {
#    \   'border': '',
#    \ },
#    \ 'signature': {
#    \   'border': '',
#    \ },
#    \ }
# call ddc_nvim_lsp_doc#enable()
# '''
# # [[plugins]]
# # repo = 'matsui54/ddc-ultisnips'
# # on_source = 'ddc.vim'
# # [[plugins]]
# # repo = 'Shougo/pum.vim'
# # on_source = 'ddc.vim'
# # hook_source = '''
# #  inoremap <silent><expr> <TAB>
# #        \ pum#visible() ? '<Cmd>call pum#map#insert_relative(+1)<CR>' :
# #        \ (col('.') <= 1 <Bar><Bar> getline('.')[col('.') - 2] =~# '\s') ?
# #        \ '<TAB>' : ddc#manual_complete()
# #   inoremap <S-Tab> <Cmd>call pum#map#insert_relative(-1)<CR>
# #   inoremap <C-n>   <Cmd>call pum#map#select_relative(+1)<CR>
# #   inoremap <C-p>   <Cmd>call pum#map#select_relative(-1)<CR>
# #   inoremap <C-y>   <Cmd>call pum#map#confirm()<CR>
# #   inoremap <C-e>   <Cmd>call pum#map#cancel()<CR>
# #
# #   call pum#set_option('setline_insert', v:true)
# # '''
# # [[plugins]]
# # repo = 'matsui54/denops-popup-preview.vim'
# # on_source = 'ddc.vim'
# # hook_source = '''
# # call popup_preview#enable()
# # '''
#

