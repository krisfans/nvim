[[plugins]]
repo = 'neoclide/coc.nvim'
on_event = 'VimEnter'
merged = 0
rev = 'release'
hook_add = '''
    let g:coc_snippet_next = '<TAB>'
    let g:coc_snippet_prev = '<S-TAB>'
    let g:coc_status_error_sign = '✗'
    let g:coc_status_warning_sign = '⚡'
    let g:coc_global_extensions =[
        \ 'coc-snippets',
        \ 'coc-json',
        \ 'coc-highlight',
        \ 'coc-clangd',
        \ 'coc-texlab',
        \ 'coc-emoji',
        \ 'coc-lists',
        \ 'coc-yaml',
        \ 'coc-db',
        \ 'coc-vimlsp',
        \ 'coc-pyright',
        \ 'coc-pairs',
        \ 'coc-toml',
        \ ]

    augroup coc_event
    autocmd!
    " Setup formatexpr specified filetype(s).
    autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
    " Update signature help on jump placeholder
    autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
    augroup end

    " Highlight symbol under cursor on CursorHold
    autocmd CursorHold * silent call CocActionAsync('highlight')
    " 刷新补全列表
    autocmd TextChangedI * silent call coc#refresh()
    autocmd CursorMovedI * silent call coc#refresh()
    autocmd TextChangedP * silent call coc#refresh()

    "Use tab for trigger completion with characters ahead and navigate
    inoremap <silent><expr> <TAB>
    \ pumvisible() ? "\<C-n>" :
    \ <SID>check_back_space() ? "\<TAB>" :
    \ coc#refresh()

    inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"
    inoremap <silent><expr> <cr> pumvisible() ? coc#_select_confirm() : "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

    function! s:check_back_space() abort
        let col = col('.') - 1
        return !col || getline('.')[col - 1]  =~# '\s'
    endfunction
'''

[[plugins]]
repo = 'honza/vim-snippets'
# on_event = 'InsertEnter'
# depends = 'coc.nvim'
if = 'has("python3")'
merged = 0


# [[plugins]]
# repo = 'windwp/nvim-autopairs'
# on_event = 'InsertEnter'
# hook_source = '''
# lua << EOF
# --require('nvim-autopairs').setup()
# require('nvim-autopairs').setup()
# local Rule = require('nvim-autopairs.rule')
# local remap = vim.api.nvim_set_keymap
# local npairs = require('nvim-autopairs')
# -- you can use some builtin condition
# local cond = require('nvim-autopairs.conds')
# npairs.add_rules({
#   Rule("$", "$",{"tex", "latex"})
#     -- don't add a pair if  the previous character is xxx
#     :with_pair(cond.not_before_regex_check("xxx", 3))
#      }
# )
# EOF
# '''

# [[plugins]]
# repo = 'neovim/nvim-lspconfig'
# hook_source ='''
# lua require('lsp')
# '''
# [[plugins]]
# repo = 'hrsh7th/nvim-compe'
# on_event = 'InsertEnter'
# hook_source = '''
# let g:compe = {}
# let g:compe.enabled = v:true
# let g:compe.autocomplete = v:true
# let g:compe.debug = v:false
# let g:compe.min_length = 0
# let g:compe.preselect = 'enable'
# let g:compe.throttle_time = 80
# let g:compe.source_timeout = 200
# let g:compe.incomplete_delay = 400
# let g:compe.max_abbr_width = 100
# let g:compe.max_kind_width = 100
# let g:compe.max_menu_width = 100
# let g:compe.documentation = v:true

# let g:compe.source = {}
# let g:compe.source.path = v:true
# let g:compe.source.buffer = v:true
# let g:compe.source.calc = v:false
# let g:compe.source.nvim_lsp = v:true
# let g:compe.source.nvim_lua = v:true
# let g:compe.source.vsnip = v:true
# highlight link CompeDocumentation NormalFloat
# inoremap <silent><expr> <C-Space> compe#complete()
# inoremap <silent><expr> <CR>      compe#confirm('<CR>')
# inoremap <silent><expr> <C-e>     compe#close('<C-e>')
# inoremap <silent><expr> <C-f>     compe#scroll({ 'delta': +4 })
# inoremap <silent><expr> <C-d>     compe#scroll({ 'delta': -4 })
# '''
# [[plugins]]
# repo = 'hrsh7th/vim-vsnip'
# hook_source = '''
# let g:vsnip_snippet_dir = expand('~/.vsnip')

# " Jump forward or backward
# imap <expr> <Tab>   vsnip#jumpable(1)   ? '<Plug>(vsnip-jump-next)'      : '<Tab>'
# smap <expr> <Tab>   vsnip#jumpable(1)   ? '<Plug>(vsnip-jump-next)'      : '<Tab>'
# imap <expr> <S-Tab> vsnip#jumpable(-1)  ? '<Plug>(vsnip-jump-prev)'      : '<S-Tab>'
# smap <expr> <S-Tab> vsnip#jumpable(-1)  ? '<Plug>(vsnip-jump-prev)'      : '<S-Tab>'
# '''


# [[plugins]]
# repo = 'hrsh7th/vim-vsnip-integ'
